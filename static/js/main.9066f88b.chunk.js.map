{"version":3,"sources":["components/ErrorFallback/index.tsx","module/index.tsx","index.tsx","context/order.tsx","utils/api/apiConfig.ts","utils/api/index.ts"],"names":["ErrorFallback","error","resetErrorBoundary","onClick","Home","React","lazy","App","theme","createTheme","palette","primary","main","grey","secondary","useState","apiAvailable","setApiAvailable","useEffect","testApi","then","res","catch","err","console","info","ThemeProvider","Container","maxWidth","Suspense","fallback","FallbackComponent","onReset","window","location","reload","maxSnack","autoHideDuration","anchorOrigin","vertical","horizontal","path","element","api","document","addEventListener","ReactDOM","render","StrictMode","getElementById","reducer","state","action","newOrders","Object","assign","orders","type","newId","count","newPaylod","id","payload","log","editing","OrderContext","createContext","displayName","initialState","OrderProvider","props","useReducer","dispatch","Provider","value","useOrderContext","context","useContext","Error","apiUrls","apiUrl","hostname","axios","defaults","headers","get","post","createOrder","order"],"mappings":"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","file":"static/js/main.9066f88b.chunk.js","sourcesContent":["import React from \"react\";\nimport type { FallbackProps } from \"react-error-boundary\";\n\n/** Simple fallback component that just reload the page */\nconst ErrorFallback = ({ error, resetErrorBoundary }: FallbackProps) => {\n    return (\n        <div>\n            <h2>Opps</h2>\n            <button onClick={resetErrorBoundary}>Reset App</button>\n        </div>\n    );\n};\n\nexport default ErrorFallback;\n","import React from \"react\";\nimport { ErrorBoundary } from \"react-error-boundary\";\nimport { Route, Routes } from \"react-router-dom\";\nimport ErrorFallback from \"../components/ErrorFallback\";\nimport { SnackbarProvider } from \"notistack\";\nimport { OrderProvider } from \"../context/order\";\nimport { Container } from \"@mui/material\";\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\nimport { grey } from \"@mui/material/colors\";\nimport { testApi } from \"../utils/api\";\n\n/** If we have more routes, then code-splitting can help lazy-load the things that are needed by the user */\nconst Home = React.lazy(() => import(\"./Home\"));\n\nfunction App() {\n    const theme = createTheme({\n        palette: {\n            primary: {\n                main: grey[400],\n            },\n            secondary: {\n                main: grey[100],\n            },\n        },\n    });\n\n    /** This is used for demo only. In real world application, API endpoints are stable and we don't need to check first */\n    const [apiAvailable, setApiAvailable] = React.useState(false);\n    React.useEffect(() => {\n        testApi()\n            .then((res) => {\n                setApiAvailable(true);\n            })\n            .catch((err) => console.info(\"Back end server not running. Please start Dev Server or check Production Server. Will mock API calls in Console\"));\n    }, []);\n\n    /** Simple FallbackComponent onReset handler */\n    const reloadPage = () => {\n        window.location.reload();\n    };\n\n    return (\n        <ThemeProvider theme={theme}>\n            <Container maxWidth=\"lg\">\n                <React.Suspense fallback={<div>Loading...</div>}>\n                    <ErrorBoundary FallbackComponent={ErrorFallback} onReset={reloadPage}>\n                        <SnackbarProvider\n                            maxSnack={3}\n                            autoHideDuration={2000}\n                            anchorOrigin={{\n                                vertical: \"top\",\n                                horizontal: \"center\",\n                            }}\n                        >\n                            <OrderProvider>\n                                <Routes>\n                                    <Route path=\"/\" element={<Home api={apiAvailable} />} />\n                                </Routes>\n                            </OrderProvider>\n                        </SnackbarProvider>\n                    </ErrorBoundary>\n                </React.Suspense>\n            </Container>\n        </ThemeProvider>\n    );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./module\";\nimport { HashRouter } from \"react-router-dom\";\nimport \"./index.scss\";\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n    ReactDOM.render(\n        <React.StrictMode>\n            <HashRouter>\n                <App />\n            </HashRouter>\n        </React.StrictMode>,\n        document.getElementById(\"root\")\n    );\n});\n","import React from \"react\";\nimport type { OrderState, Order } from \"../shared/types\";\n\ntype ActionType =\n    | { type: \"create\"; payload: Omit<Order, \"id\"> }\n    /** App does not update orders after they have been added to basket, but this action can handle it */\n    | { type: \"update\"; payload: Order }\n    | { type: \"delete\"; payload: number }\n    /** When user click `Choose`, they're editing an order. If they choose to `Add to Basket`, then order is created, otherwise, it will be `clear` */\n    | { type: \"edit\"; payload: null | Partial<Order> }\n    | { type: \"clear\" }\n    | { type: \"submit\" };\n\nfunction reducer(state: OrderState, action: ActionType) {\n    let newOrders = Object.assign({}, state.orders);\n    switch (action.type) {\n        case \"create\":\n            let newId = state.count + 1;\n            let newPaylod = { id: newId, ...action.payload };\n            console.log(`create`, action);\n            return {\n                ...state,\n                count: newId,\n                editing: null,\n                orders: {\n                    ...state.orders,\n                    [newId]: newPaylod,\n                },\n            };\n        case \"update\":\n            console.log(`update`, action);\n            return {\n                ...state,\n                editing: null,\n                orders: {\n                    ...state.orders,\n                    [action.payload.id]: action.payload,\n                },\n            };\n        case \"delete\":\n            console.log(`delete`, action);\n            delete newOrders[action.payload];\n            return {\n                ...state,\n                orders: newOrders,\n            };\n        case \"edit\":\n            return {\n                ...state,\n                editing: action.payload,\n            };\n        case \"clear\":\n        case \"submit\":\n            return {\n                ...state,\n                orders: null,\n            };\n        default:\n            return state;\n    }\n}\n\ntype ContextType = [OrderState, React.Dispatch<ActionType>];\n\nconst OrderContext = React.createContext<ContextType | null>(null);\nOrderContext.displayName = \"OrderContext\";\n\nconst initialState: OrderState = {\n    editing: null,\n    count: 0,\n    orders: null,\n};\n\nexport function OrderProvider(props: React.PropsWithChildren<{}>) {\n    const [state, dispatch] = React.useReducer(reducer, initialState);\n    return <OrderContext.Provider value={[state, dispatch]} {...props} />;\n}\n\nexport function useOrderContext() {\n    const context = React.useContext(OrderContext);\n    if (!context) {\n        throw new Error(\"useOrderContext must be used within OrderProvider\");\n    }\n    return context;\n}\n","let apiUrl;\n\n/** Production and Development endpoints, do not change */\nconst apiUrls = {\n    production: \"https://hidden-springs-06951.herokuapp.com/\",\n    development: \"http://localhost:8080/\",\n};\n\nif (window.location.hostname === \"localhost\") {\n    apiUrl = apiUrls.development;\n} else {\n    apiUrl = apiUrls.production;\n}\n\nexport default apiUrl as string;\n","import axios from \"axios\";\nimport apiUrl from \"./apiConfig\";\nimport type { Order } from \"../../shared/types\";\n\naxios.defaults.headers.get[\"Content-Type\"] = \"application/json\";\naxios.defaults.headers.post[\"Content-Type\"] = \"application/json\";\n\n/** Creates an order or orders to backend services */\nexport const createOrder = (order: Order | Order[]): Promise<any> => axios.post(apiUrl + \"api/orders\", order);\n\n/** Test if any services are available, do not call `createOrder` not services available */\nexport const testApi = () => axios.get(apiUrl + \"api/orders/test\");\n"],"sourceRoot":""}